{
"name":"csp-j/s题库",
"questions":[
  {
    "id": 1,
    "question": "在计算机中，1字节（Byte）等于多少位（bit）？",
    "options": ["8", "16", "32", "64", "1024", "2048"],
    "answer": "8",
    "difficulty": 1,
    "explanation": "字节是计算机存储的基本单位，1字节等于8位，位是计算机中最小的信息单位。"
  },
  {
    "id": 2,
    "question": "下列哪种不属于计算机编程语言？",
    "options": ["HTML", "Python", "C++", "Java", "JavaScript", "SQL"],
    "answer": "HTML",
    "difficulty": 2,
    "explanation": "HTML是超文本标记语言，用于构建网页结构，不属于编程语言，其余均为编程语言。"
  },
  {
    "id": 3,
    "question": "队列的操作特点是？",
    "options": ["先进先出", "先进后出", "随机存取", "尾进尾出", "无序存取", "双向存取"],
    "answer": "先进先出",
    "difficulty": 2,
    "explanation": "队列是一种线性数据结构，遵循“先进先出”（FIFO）的操作原则。"
  },
  {
    "id": 4,
    "question": "十进制数36转换成二进制数是？",
    "options": ["100100", "101000", "110000", "100010", "101100", "111000"],
    "answer": "100100",
    "difficulty": 2,
    "explanation": "通过除2取余法，36÷2=18余0，18÷2=9余0，9÷2=4余1，4÷2=2余0，2÷2=1余0，1÷2=0余1，倒序得100100。"
  },
  {
    "id": 5,
    "question": "以下哪种排序算法是稳定排序？",
    "options": ["冒泡排序", "快速排序", "选择排序", "堆排序", "希尔排序", "基数排序"],
    "answer": "冒泡排序",
    "difficulty": 3,
    "explanation": "稳定排序是指相等元素的相对顺序在排序后保持不变，冒泡排序属于稳定排序，其余选项多为不稳定排序。"
  },
  {
    "id": 6,
    "question": "在C++中，以下哪个关键字用于定义常量？",
    "options": ["const", "static", "volatile", "register", "auto", "extern"],
    "answer": "const",
    "difficulty": 2,
    "explanation": "const关键字用于定义常量，其值在程序运行过程中不能被修改。"
  },
  {
    "id": 7,
    "question": "计算机网络OSI模型分为几层？",
    "options": ["7", "5", "6", "4", "3", "8"],
    "answer": "7",
    "difficulty": 2,
    "explanation": "OSI模型从下到上依次为物理层、数据链路层、网络层、传输层、会话层、表示层、应用层，共7层。"
  },
  {
    "id": 8,
    "question": "一棵满二叉树有15个节点，其叶子节点数为？",
    "options": ["8", "7", "15", "1", "14", "4"],
    "answer": "8",
    "difficulty": 3,
    "explanation": "满二叉树中，叶子节点数等于非叶子节点数加1，15个节点的满二叉树叶子节点数为8。"
  },
  {
    "id": 9,
    "question": "下列哪种数据结构适合实现哈希表？",
    "options": ["数组", "链表", "栈", "队列", "二叉树", "图"],
    "answer": "数组",
    "difficulty": 2,
    "explanation": "哈希表通常通过数组存储数据，利用哈希函数计算索引，实现快速存取。"
  },
  {
    "id": 10,
    "question": "十六进制数A5对应的十进制数是？",
    "options": ["165", "155", "175", "145", "185", "195"],
    "answer": "165",
    "difficulty": 2,
    "explanation": "十六进制转十进制：10×16¹ + 5×16⁰ = 160 + 5 = 165。"
  },
  {
    "id": 11,
    "question": "以下哪种不是操作系统的功能？",
    "options": ["编译程序", "进程管理", "内存管理", "文件管理", "设备管理", "作业管理"],
    "answer": "编译程序",
    "difficulty": 2,
    "explanation": "编译程序是将高级语言转换为机器语言的工具，属于语言处理程序，不是操作系统的功能。"
  },
  {
    "id": 12,
    "question": "逻辑运算中，“真 or 假”的结果是？",
    "options": ["真", "假", "不确定", "0", "1", "以上都不对"],
    "answer": "真",
    "difficulty": 1,
    "explanation": "逻辑或运算中，只要有一边为真，结果就为真。"
  },
  {
    "id": 13,
    "question": "链表相对于数组的优势是？",
    "options": ["插入删除效率高", "随机访问效率高", "存储密度大", "占用空间小", "实现简单", "适合大量数据存储"],
    "answer": "插入删除效率高",
    "difficulty": 2,
    "explanation": "链表不需要连续存储空间，插入和删除元素时只需修改指针，效率高于数组。"
  },
  {
    "id": 14,
    "question": "以下哪个算法用于在有序数组中查找元素？",
    "options": ["二分查找", "冒泡排序", "快速排序", "选择排序", "插入排序", "归并排序"],
    "answer": "二分查找",
    "difficulty": 2,
    "explanation": "二分查找利用有序数组的特性，每次缩小一半查找范围，效率高于顺序查找。"
  },
  {
    "id": 15,
    "question": "二进制数110101对应的十进制数是？",
    "options": ["53", "51", "55", "49", "61", "63"],
    "answer": "53",
    "difficulty": 2,
    "explanation": "1×2⁵ + 1×2⁴ + 0×2³ + 1×2² + 0×2¹ + 1×2⁰ = 32 + 16 + 0 + 4 + 0 + 1 = 53。"
  },
  {
    "id": 16,
    "question": "CSP-S认证中，S指的是？",
    "options": ["提高级", "入门级", "专业级", "进阶级", "基础级", "精英级"],
    "answer": "提高级",
    "difficulty": 1,
    "explanation": "CSP-J/S是软件能力认证，J为入门级（Junior），S为提高级（Senior）。"
  },
  {
    "id": 17,
    "question": "以下哪种不是计算机的输入设备？",
    "options": ["打印机", "键盘", "鼠标", "扫描仪", "摄像头", "麦克风"],
    "answer": "打印机",
    "difficulty": 1,
    "explanation": "打印机是输出设备，用于将计算机处理结果打印出来，其余均为输入设备。"
  },
  {
    "id": 18,
    "question": "一棵二叉树的前序遍历为ABCDE，中序遍历为BADCE，则后序遍历是？",
    "options": ["BEDCA", "BDCEA", "BDECA", "BEDAC", "BDACE", "BDEAC"],
    "answer": "BEDCA",
    "difficulty": 4,
    "explanation": "由前序可知根为A，中序中A左边为B（左子树），右边为DCE（右子树）；右子树前序为CDE，中序为DCE，可推知结构，后序遍历为BEDCA。"
  },
  {
    "id": 19,
    "question": "在C++中，以下哪个函数用于读取键盘输入？",
    "options": ["cin", "cout", "printf", "scanf", "fread", "fwrite"],
    "answer": "cin",
    "difficulty": 2,
    "explanation": "cin是C++标准输入流对象，用于从标准输入设备（键盘）读取数据。"
  },
  {
    "id": 20,
    "question": "十进制数255转换成十六进制数是？",
    "options": ["FF", "FE", "FD", "FC", "FA", "FB"],
    "answer": "FF",
    "difficulty": 2,
    "explanation": "255÷16=15余15，15在十六进制中表示为F，故为FF。"
  },
  {
    "id": 21,
    "question": "以下哪种排序算法的最坏时间复杂度为O(n²)？",
    "options": ["冒泡排序", "快速排序", "归并排序", "堆排序", "基数排序", "希尔排序"],
    "answer": "冒泡排序",
    "difficulty": 3,
    "explanation": "冒泡排序在最坏情况下（逆序）需要比较n(n-1)/2次，时间复杂度为O(n²)。"
  },
  {
    "id": 22,
    "question": "计算机网络中，IP地址v4的长度是多少位？",
    "options": ["32", "64", "128", "48", "24", "16"],
    "answer": "32",
    "difficulty": 2,
    "explanation": "IPv4地址由32位二进制数组成，通常表示为4个十进制数（点分十进制）。"
  },
  {
    "id": 23,
    "question": "栈和队列的共同点是？",
    "options": ["只允许在端点处插入和删除元素", "都是先进先出", "都是先进后出", "没有共同点", "都可以随机访问", "都需要连续存储空间"],
    "answer": "只允许在端点处插入和删除元素",
    "difficulty": 2,
    "explanation": "栈只允许在栈顶操作，队列只允许在队尾插入、队头删除，均只能在端点操作。"
  },
  {
    "id": 24,
    "question": "在C++中，以下哪个是单目运算符？",
    "options": ["++", "+", "-", "*", "/", "%"],
    "answer": "++",
    "difficulty": 2,
    "explanation": "单目运算符只需要一个操作数，++（自增）是单目运算符，其余为双目运算符。"
  },
  {
    "id": 25,
    "question": "二进制数10000000对应的十进制数是？",
    "options": ["128", "64", "256", "32", "16", "8"],
    "answer": "128",
    "difficulty": 1,
    "explanation": "1×2⁷ = 128。"
  },
  {
    "id": 26,
    "question": "以下哪种数据结构用于实现优先级队列？",
    "options": ["堆", "栈", "链表", "数组", "队列", "图"],
    "answer": "堆",
    "difficulty": 3,
    "explanation": "堆（通常是二叉堆）能高效地获取和删除最大（或最小）元素，适合实现优先级队列。"
  },
  {
    "id": 27,
    "question": "下列哪个不是计算机网络协议？",
    "options": ["HTTP", "HTML", "TCP", "IP", "FTP", "SMTP"],
    "answer": "HTML",
    "difficulty": 2,
    "explanation": "HTML是标记语言，其余均为网络协议（HTTP超文本传输协议、TCP传输控制协议等）。"
  },
  {
    "id": 28,
    "question": "一棵有n个节点的完全二叉树，其深度为？（根节点深度为1）",
    "options": ["floor(log₂n) + 1", "ceil(log₂n)", "n", "log₂n", "floor(log₂n)", "ceil(log₂n) + 1"],
    "answer": "floor(log₂n) + 1",
    "difficulty": 4,
    "explanation": "完全二叉树的深度计算公式为 floor(log₂n) + 1，其中floor为向下取整函数。"
  },
  {
    "id": 29,
    "question": "在C++中，以下哪个循环语句至少执行一次循环体？",
    "options": ["do-while", "while", "for", "if", "switch", "goto"],
    "answer": "do-while",
    "difficulty": 2,
    "explanation": "do-while循环先执行循环体，再判断条件，因此至少执行一次；while和for先判断条件，可能一次不执行。"
  },
  {
    "id": 30,
    "question": "十进制数127转换成二进制数是？",
    "options": ["1111111", "1111110", "1111101", "1111011", "1110111", "1101111"],
    "answer": "1111111",
    "difficulty": 2,
    "explanation": "127是2⁷ - 1，二进制表示为7个1，即1111111。"
  },
  {
    "id": 31,
    "question": "以下哪种算法是分治算法的典型应用？",
    "options": ["归并排序", "冒泡排序", "插入排序", "选择排序", "希尔排序", "基数排序"],
    "answer": "归并排序",
    "difficulty": 3,
    "explanation": "归并排序将数组分成两半，分别排序后合并，是分治算法的典型例子。"
  },
  {
    "id": 32,
    "question": "计算机的CPU主要由哪两部分组成？",
    "options": ["运算器和控制器", "内存和外存", "输入和输出设备", "主机和外设", "硬件和软件", "主板和显卡"],
    "answer": "运算器和控制器",
    "difficulty": 1,
    "explanation": "CPU（中央处理器）由运算器（执行算术和逻辑运算）和控制器（控制指令执行）组成。"
  },
  {
    "id": 33,
    "question": "图的深度优先搜索（DFS）通常使用哪种数据结构实现？",
    "options": ["栈", "队列", "数组", "链表", "堆", "哈希表"],
    "answer": "栈",
    "difficulty": 3,
    "explanation": "DFS通过递归（隐式栈）或显式栈实现，优先沿着路径深入搜索。"
  },
  {
    "id": 34,
    "question": "在C++中，以下哪个关键字用于继承类？",
    "options": ["public", "class", "struct", "enum", "union", "namespace"],
    "answer": "public",
    "difficulty": 3,
    "explanation": "在C++中，类的继承方式通过public、private、protected指定，public表示公有继承。"
  },
  {
    "id": 35,
    "question": "十六进制数1F对应的二进制数是？",
    "options": ["11111", "10000", "11110", "10101", "11001", "10111"],
    "answer": "11111",
    "difficulty": 2,
    "explanation": "十六进制1对应二进制0001，F对应1111，合并为11111（省略前导0）。"
  },
  {
    "id": 36,
    "question": "以下哪种不是线性数据结构？",
    "options": ["二叉树", "数组", "链表", "栈", "队列", "字符串"],
    "answer": "二叉树",
    "difficulty": 2,
    "explanation": "线性结构中数据元素呈线性排列，二叉树是层次结构，属于非线性数据结构。"
  },
  {
    "id": 37,
    "question": "计算机中，RAM的特点是？",
    "options": ["断电后数据丢失", "断电后数据不丢失", "只能读取不能写入", "存储容量大", "速度慢", "属于外存"],
    "answer": "断电后数据丢失",
    "difficulty": 1,
    "explanation": "RAM（随机存取存储器）是临时存储，断电后数据丢失；ROM断电后数据不丢失。"
  },
  {
    "id": 38,
    "question": "对n个元素进行冒泡排序，最好情况下的比较次数是？",
    "options": ["n-1", "n", "n(n-1)/2", "n²", "log₂n", "n log₂n"],
    "answer": "n-1",
    "difficulty": 3,
    "explanation": "最好情况是数组已有序，只需比较n-1次（一趟完成）。"
  },
  {
    "id": 39,
    "question": "在C++中，以下哪个函数用于输出信息到屏幕？",
    "options": ["cout", "cin", "printf", "scanf", "fprintf", "fscanf"],
    "answer": "cout",
    "difficulty": 1,
    "explanation": "cout是C++标准输出流对象，用于向标准输出设备（屏幕）输出数据。"
  },
  {
    "id": 40,
    "question": "十进制数5对应的二进制、八进制、十六进制表示中，正确的是？",
    "options": ["101,5,5", "100,4,4", "110,6,6", "111,7,7", "101,6,5", "100,5,4"],
    "answer": "101,5,5",
    "difficulty": 2,
    "explanation": "5的二进制为101，八进制为5，十六进制为5。"
  },
  {
    "id": 41,
    "question": "以下哪种图的遍历方式类似于树的层次遍历？",
    "options": ["广度优先搜索（BFS）", "深度优先搜索（DFS）", "先序遍历", "中序遍历", "后序遍历", "随机遍历"],
    "answer": "广度优先搜索（BFS）",
    "difficulty": 3,
    "explanation": "BFS按层次逐层访问节点，与树的层次遍历思想一致，通常用队列实现。"
  },
  {
    "id": 42,
    "question": "下列哪个是计算机的外存储设备？",
    "options": ["硬盘", "内存", "CPU", "主板", "显卡", "声卡"],
    "answer": "硬盘",
    "difficulty": 1,
    "explanation": "硬盘属于外存，用于长期存储数据；内存是临时存储，属于内存设备。"
  },
  {
    "id": 43,
    "question": "在一个长度为n的顺序表中，删除第i个元素（1≤i≤n）需要移动的元素个数是？",
    "options": ["n-i", "n-i+1", "i", "i-1", "n", "1"],
    "answer": "n-i",
    "difficulty": 3,
    "explanation": "删除第i个元素后，其后面的n-i个元素需向前移动一位。"
  },
  {
    "id": 44,
    "question": "C++中，以下哪个不是循环控制语句？",
    "options": ["if", "for", "while", "do-while", "break", "continue"],
    "answer": "if",
    "difficulty": 1,
    "explanation": "if是条件判断语句，其余均与循环控制相关（for、while、do-while是循环语句，break、continue用于控制循环流程）。"
  },
  {
    "id": 45,
    "question": "二进制数111001转换成十六进制数是？",
    "options": ["39", "3A", "3B", "3C", "3D", "3E"],
    "answer": "39",
    "difficulty": 2,
    "explanation": "二进制111001从右分组为0011 1001，对应十六进制3和9，即39。"
  },
  {
    "id": 46,
    "question": "以下哪种算法可用于求最短路径？",
    "options": ["Dijkstra算法", "冒泡排序", "快速排序", "归并排序", "希尔排序", "堆排序"],
    "answer": "Dijkstra算法",
    "difficulty": 3,
    "explanation": "Dijkstra算法用于求解带权有向图中从一个源点到其他所有顶点的最短路径。"
  },
  {
    "id": 47,
    "question": "计算机中，1GB等于多少MB？",
    "options": ["1024", "1000", "2048", "512", "1024×1024", "1000×1000"],
    "answer": "1024",
    "difficulty": 1,
    "explanation": "计算机存储单位中，1GB = 1024MB，1MB = 1024KB，基于2的幂次。"
  },
  {
    "id": 48,
    "question": "一棵二叉树的中序遍历为ABCDE，后序遍历为ABCDE，则其前序遍历是？",
    "options": ["EDCBA", "ABCDE", "EABCD", "DCBAE", "BAEDC", "CDEAB"],
    "answer": "EDCBA",
    "difficulty": 4,
    "explanation": "后序遍历最后一个元素为根，中序遍历与后序遍历相同，说明该树为左斜树（每个节点只有左子树），根为E，前序遍历为EDCBA。"
  },
  {
    "id": 49,
    "question": "在C++中，以下哪个是动态内存分配的运算符？",
    "options": ["new", "delete", "malloc", "free", "sizeof", "auto"],
    "answer": "new",
    "difficulty": 2,
    "explanation": "new是C++的动态内存分配运算符，malloc是C语言的函数，delete用于释放new分配的内存。"
  },
  {
    "id": 50,
    "question": "十进制数0.25转换成二进制数是？",
    "options": ["0.01", "0.1", "0.11", "0.101", "0.001", "0.1001"],
    "answer": "0.01",
    "difficulty": 3,
    "explanation": "小数部分乘2取整：0.25×2=0.5取0，0.5×2=1.0取1，结果为0.01。"
  },
  {
    "id": 51,
    "question": "在C语言中，用于格式化输出数据的函数是？",
    "options": ["printf", "cout", "cin", "scanf", "fprintf", "fscanf"],
    "answer": "printf",
    "difficulty": 2,
    "explanation": "printf是C语言标准库中的格式化输出函数，支持通过格式控制符（如%d、%s）输出不同类型数据；cout是C++的输出流对象，scanf是C语言的输入函数，均与题干要求不符。"
  },
  {
    "id": 52,
    "question": "计算机硬件中，显卡的主要功能是？",
    "options": ["处理图形图像数据", "存储临时计算数据", "执行算术逻辑运算", "管理文件存储", "连接网络设备", "输入用户指令"],
    "answer": "处理图形图像数据",
    "difficulty": 1,
    "explanation": "显卡（图形处理器）的核心功能是接收CPU指令，处理图形图像渲染、视频解码等数据；存储临时数据是内存的功能，执行运算为CPU功能，其余选项分别对应硬盘、网卡、输入设备的功能。"
  },
  {
    "id": 53,
    "question": "下列哪种数据结构适合实现“最近使用淘汰”（LRU）缓存策略？",
    "options": ["双向链表+哈希表", "数组", "单向链表", "栈", "队列", "二叉树"],
    "answer": "双向链表+哈希表",
    "difficulty": 4,
    "explanation": "LRU需快速访问（哈希表O(1)查找）和快速移动节点（双向链表O(1)调整顺序），二者结合可满足缓存的高效增删查需求；数组随机访问快但插入删除慢，单向链表调整节点需遍历，均不适合。"
  },
  {
    "id": 54,
    "question": "十进制数128转换成二进制数是？",
    "options": ["10000000", "1111111", "1000000", "1000001", "10000100", "10100000"],
    "answer": "10000000",
    "difficulty": 2,
    "explanation": "128是2的7次幂（2⁷=128），二进制表示为1后面跟7个0，即10000000。"
  },
  {
    "id": 55,
    "question": "在C++中，函数参数传递方式不包括下列哪种？",
    "options": ["指针传递", "值传递", "引用传递", "地址传递", "文件传递", "值传递+引用传递"],
    "answer": "文件传递",
    "difficulty": 2,
    "explanation": "C++函数参数传递常用值传递、引用传递、指针传递（地址传递的一种），文件传递是通过文件读写交换数据，不属于函数参数传递方式。"
  },
  {
    "id": 56,
    "question": "下列哪种排序算法的平均时间复杂度为O(n log n)且是稳定排序？",
    "options": ["归并排序", "快速排序", "选择排序", "堆排序", "希尔排序", "冒泡排序"],
    "answer": "归并排序",
    "difficulty": 3,
    "explanation": "归并排序通过分治思想实现，平均时间复杂度O(n log n)，且相等元素相对顺序不变（稳定）；快速排序、堆排序、希尔排序不稳定，冒泡排序平均复杂度O(n²)。"
  },
  {
    "id": 57,
    "question": "计算机网络中，TCP协议的特点是？",
    "options": ["面向连接、可靠", "无连接、不可靠", "面向连接、不可靠", "无连接、可靠", "仅用于文件传输", "仅用于视频通话"],
    "answer": "面向连接、可靠",
    "difficulty": 2,
    "explanation": "TCP（传输控制协议）需通过三次握手建立连接，通过确认、重传机制保证数据可靠传输；无连接、不可靠是UDP协议的特点，TCP可用于多种应用场景（如网页、文件传输）。"
  },
  {
    "id": 58,
    "question": "一棵二叉搜索树（BST）的中序遍历结果是？",
    "options": ["从小到大有序", "从大到小有序", "随机无序", "与前序遍历一致", "与后序遍历一致", "根节点始终在第一位"],
    "answer": "从小到大有序",
    "difficulty": 3,
    "explanation": "二叉搜索树的定义为：左子树所有节点值小于根节点，右子树所有节点值大于根节点，中序遍历（左-根-右）会按“从小到大”顺序输出所有节点值。"
  },
  {
    "id": 59,
    "question": "在C++中，以下哪个关键字用于声明引用变量？",
    "options": ["&", "*", "const", "static", "auto", "extern"],
    "answer": "&",
    "difficulty": 2,
    "explanation": "C++中通过“&”声明引用，引用是变量的别名，如“int &a = b;”表示a是b的引用；“*”用于声明指针，const用于定义常量，均与引用声明无关。"
  },
  {
    "id": 60,
    "question": "十六进制数FF对应的十进制数是？",
    "options": ["255", "254", "256", "127", "128", "250"],
    "answer": "255",
    "difficulty": 2,
    "explanation": "十六进制FF转换为十进制：15×16¹ + 15×16⁰ = 240 + 15 = 255。"
  },
  {
    "id": 61,
    "question": "操作系统中，“进程”的定义是？",
    "options": ["正在运行的程序实例", "程序代码本身", "计算机硬件资源", "文件存储的集合", "用户输入的指令", "网络传输的数据包"],
    "answer": "正在运行的程序实例",
    "difficulty": 2,
    "explanation": "进程是程序在计算机中的一次运行活动，是操作系统资源分配的基本单位；程序是静态的代码集合，进程是动态的运行过程，二者本质不同。"
  },
  {
    "id": 62,
    "question": "逻辑运算中，“真 and 真”的结果是？",
    "options": ["真", "假", "不确定", "0", "1", "以上都不对"],
    "answer": "真",
    "difficulty": 1,
    "explanation": "逻辑与（and）运算规则：只有当两个操作数均为真时，结果才为真；否则为假。因此“真 and 真”结果为真。"
  },
  {
    "id": 63,
    "question": "数组与哈希表的主要区别是？",
    "options": ["查找方式不同（索引vs键值）", "存储元素类型不同", "长度是否固定", "是否支持插入操作", "是否支持删除操作", "是否占用连续空间"],
    "answer": "查找方式不同（索引vs键值）",
    "difficulty": 3,
    "explanation": "数组通过整数索引（如arr[0]）查找元素，哈希表通过键值（如key=“name”）结合哈希函数查找；二者均可存储多种类型元素、支持增删，数组也可动态扩容（如C++ vector），连续空间并非核心区别。"
  },
  {
    "id": 64,
    "question": "以下哪种算法用于求解“单源最短路径”且适用于含负权边的图？",
    "options": ["Bellman-Ford算法", "Dijkstra算法", "冒泡排序", "快速排序", "归并排序", "堆排序"],
    "answer": "Bellman-Ford算法",
    "difficulty": 4,
    "explanation": "Bellman-Ford算法可处理含负权边的图，通过多次松弛操作求解单源最短路径；Dijkstra算法无法处理负权边，其余选项均为排序算法，与路径求解无关。"
  },
  {
    "id": 65,
    "question": "二进制数10110对应的十进制数是？",
    "options": ["22", "20", "24", "18", "26", "16"],
    "answer": "22",
    "difficulty": 2,
    "explanation": "二进制10110转换为十进制：1×2⁴ + 0×2³ + 1×2² + 1×2¹ + 0×2⁰ = 16 + 0 + 4 + 2 + 0 = 22。"
  },
  {
    "id": 66,
    "question": "CSP-J认证中，J指的是哪个英文单词的缩写？",
    "options": ["Junior", "Senior", "Advanced", "Basic", "Professional", "Elite"],
    "answer": "Junior",
    "difficulty": 1,
    "explanation": "CSP-J/S是全国计算机软件能力认证，J对应“Junior”（入门级），面向初中及以下水平学习者；S对应“Senior”（提高级），面向高中及以上水平。"
  },
  {
    "id": 67,
    "question": "以下哪种设备属于计算机的输出设备？",
    "options": ["显示器", "键盘", "鼠标", "扫描仪", "摄像头", "麦克风"],
    "answer": "显示器",
    "difficulty": 1,
    "explanation": "输出设备用于将计算机处理结果呈现给用户，显示器通过图像、文字输出信息；键盘、鼠标、扫描仪等均为输入设备，用于向计算机传递用户指令或数据。"
  },
  {
    "id": 68,
    "question": "一棵二叉树的后序遍历为DEBFGCA，中序遍历为DBEACFG，则其根节点是？",
    "options": ["A", "B", "C", "D", "E", "F"],
    "answer": "A",
    "difficulty": 4,
    "explanation": "后序遍历（左-右-根）的最后一个元素为根节点，题干后序遍历最后一位是“A”；结合中序遍历，A左边“DBE”为左子树，右边“CFG”为右子树，进一步验证根节点为A。"
  },
  {
    "id": 69,
    "question": "在C++中，以下哪个头文件需要包含以使用输入输出流（如cin、cout）？",
    "options": ["<iostream>", "<stdio.h>", "<cstdio>", "<string.h>", "<math.h>", "<stdlib.h>"],
    "answer": "<iostream>",
    "difficulty": 2,
    "explanation": "<iostream>是C++标准输入输出流的头文件，包含cin、cout等对象的声明；<stdio.h>和<cstdio>是C语言风格的输入输出头文件（如printf、scanf），其余头文件分别对应字符串、数学、通用工具函数。"
  },
  {
    "id": 70,
    "question": "十进制数0对应的二进制数是？",
    "options": ["0", "1", "10", "11", "100", "101"],
    "answer": "0",
    "difficulty": 1,
    "explanation": "十进制0在二进制中表示为“0”，不存在位数扩展（如“00”“000”），核心值为0。"
  },
  {
    "id": 71,
    "question": "以下哪种排序算法通过“比较相邻元素并交换逆序对”实现排序？",
    "options": ["冒泡排序", "快速排序", "归并排序", "堆排序", "基数排序", "希尔排序"],
    "answer": "冒泡排序",
    "difficulty": 2,
    "explanation": "冒泡排序的核心逻辑是：重复遍历数组，比较相邻元素，若顺序逆序则交换，直至无逆序对；快速排序基于分治，归并排序基于合并，均不依赖相邻元素交换。"
  },
  {
    "id": 72,
    "question": "计算机网络中，IPv6地址的长度是多少位？",
    "options": ["128", "32", "64", "48", "24", "16"],
    "answer": "128",
    "difficulty": 2,
    "explanation": "IPv6（互联网协议第6版）地址由128位二进制数组成，通常表示为8组十六进制数（冒分十六进制）；IPv4地址为32位，二者地址空间差异显著。"
  },
  {
    "id": 73,
    "question": "栈在编程中的典型应用不包括？",
    "options": ["层次遍历图", "表达式求值", "函数调用栈", "括号匹配检查", " undo操作", "深度优先搜索（DFS）"],
    "answer": "层次遍历图",
    "difficulty": 3,
    "explanation": "层次遍历图依赖队列实现（先进先出），栈的典型应用包括表达式求值（如后缀表达式计算）、函数调用（保存返回地址）、括号匹配（栈内存储左括号）等。"
  },
  {
    "id": 74,
    "question": "在C++中，以下哪个运算符用于动态内存释放？",
    "options": ["delete", "new", "malloc", "free", "sizeof", "auto"],
    "answer": "delete",
    "difficulty": 2,
    "explanation": "C++中通过“delete”释放由“new”分配的动态内存，如“delete p;”（释放单个变量）或“delete[] arr;”（释放数组）；free是C语言的内存释放函数，用于释放malloc分配的内存。"
  },
  {
    "id": 75,
    "question": "二进制数1111对应的十进制数是？",
    "options": ["15", "14", "13", "12", "11", "10"],
    "answer": "15",
    "difficulty": 1,
    "explanation": "二进制1111转换为十进制：1×2³ + 1×2² + 1×2¹ + 1×2⁰ = 8 + 4 + 2 + 1 = 15。"
  },
  {
    "id": 76,
    "question": "以下哪种数据结构是“先进先出”（FIFO）的线性结构？",
    "options": ["队列", "栈", "数组", "链表", "堆", "二叉树"],
    "answer": "队列",
    "difficulty": 1,
    "explanation": "队列的核心操作原则是“先进先出”（FIFO），仅允许在队尾插入、队头删除；栈是“先进后出”（LIFO），数组、链表是存储结构（可实现队列或栈），堆和二叉树是非线性结构。"
  },
  {
    "id": 77,
    "question": "计算机网络中，HTTP协议主要用于？",
    "options": ["网页数据传输", "文件加密", "硬件设备通信", "进程间通信", "视频流加密", "数据库连接"],
    "answer": "网页数据传输",
    "difficulty": 2,
    "explanation": "HTTP（超文本传输协议）是应用层协议，主要用于浏览器与Web服务器之间传输网页数据（如HTML、图片、脚本）；文件加密、硬件通信、数据库连接等均有专用协议或机制。"
  },
  {
    "id": 78,
    "question": "一棵有n个节点的二叉树，其最小深度是多少（根节点深度为1）？",
    "options": ["floor(log₂n) + 1", "n", "log₂n", "floor(log₂n)", "ceil(log₂n)", "n-1"],
    "answer": "floor(log₂n) + 1",
    "difficulty": 4,
    "explanation": "二叉树最小深度对应完全二叉树的深度，计算公式为“floor(log₂n) + 1”（floor为向下取整），例如n=5时，floor(log₂5)=2，最小深度为3。"
  },
  {
    "id": 79,
    "question": "在C++中，以下哪个循环语句适合“已知循环次数”的场景？",
    "options": ["for", "while", "do-while", "if", "switch", "goto"],
    "answer": "for",
    "difficulty": 2,
    "explanation": "for循环通过“初始化-条件判断-更新”结构，明确控制循环次数（如“for(int i=0; i<10; i++)”循环10次）；while和do-while更适合“未知循环次数、已知终止条件”的场景，if不是循环语句。"
  },
  {
    "id": 80,
    "question": "十进制数64转换成十六进制数是？",
    "options": ["40", "3F", "41", "3E", "42", "3D"],
    "answer": "40",
    "difficulty": 2,
    "explanation": "64÷16=4余0，十六进制中4对应“4”，余数0对应“0”，故64的十六进制表示为40。"
  },
  {
    "id": 81,
    "question": "以下哪种算法是“贪心算法”的典型应用？",
    "options": ["霍夫曼编码", "归并排序", "快速排序", "Dijkstra算法（无负权）", "Bellman-Ford算法", "冒泡排序"],
    "answer": "霍夫曼编码",
    "difficulty": 3,
    "explanation": "霍夫曼编码通过“每次选择频率最低的两个节点合并”的贪心策略，构建最优前缀编码；Dijkstra算法（无负权）虽可通过贪心实现，但本质是动态规划思想，归并排序等为排序算法，与贪心无关。"
  },
  {
    "id": 82,
    "question": "计算机硬件中，内存（RAM）的主要作用是？",
    "options": ["临时存储运行中的程序和数据", "长期存储文件", "执行算术逻辑运算", "处理图形图像", "连接外部设备", "输入用户指令"],
    "answer": "临时存储运行中的程序和数据",
    "difficulty": 1,
    "explanation": "RAM（随机存取存储器）是临时存储介质，用于存放CPU正在运行的程序和处理的数据，断电后数据丢失；长期存储文件是硬盘的功能，执行运算为CPU功能。"
  },
  {
    "id": 83,
    "question": "图的广度优先搜索（BFS）通常使用哪种数据结构实现？",
    "options": ["队列", "栈", "数组", "链表", "堆", "哈希表"],
    "answer": "队列",
    "difficulty": 3,
    "explanation": "BFS的核心是“逐层访问节点”，队列的“先进先出”特性可保证先访问的节点其邻接节点优先被处理；栈用于深度优先搜索（DFS），堆用于优先级队列相关场景。"
  },
  {
    "id": 84,
    "question": "在C++中，以下哪个关键字用于定义类？",
    "options": ["class", "struct", "enum", "union", "namespace", "public"],
    "answer": "class",
    "difficulty": 2,
    "explanation": "C++中通过“class”关键字定义类，如“class Student { ... };”；struct用于定义结构体（与类类似但默认访问权限不同），enum用于定义枚举类型，均与类定义无关。"
  },
  {
    "id": 85,
    "question": "十六进制数1A对应的二进制数是？",
    "options": ["11010", "10101", "11100", "10011", "11001", "10110"],
    "answer": "11010",
    "difficulty": 2,
    "explanation": "十六进制1对应二进制0001，A对应1010，合并后为00011010，省略前导0后为11010。"
  },
  {
    "id": 86,
    "question": "以下哪种不是非线性数据结构？",
    "options": ["数组", "二叉树", "图", "堆", "哈希表（链式解决冲突）", "树"],
    "answer": "数组",
    "difficulty": 2,
    "explanation": "线性结构中数据元素呈“一对一”线性关系，数组符合此特征；二叉树、图、堆等数据元素呈“一对多”或“多对多”关系，属于非线性结构。"
  },
  {
    "id": 87,
    "question": "计算机中，ROM的特点是？",
    "options": ["断电后数据不丢失", "断电后数据丢失", "可随意读写", "存储容量大", "速度快", "属于外存"],
    "answer": "断电后数据不丢失",
    "difficulty": 1,
    "explanation": "ROM（只读存储器）用于存储计算机启动必需的固件（如BIOS），其数据在出厂时写入，断电后不会丢失；RAM断电后数据丢失，ROM通常不可随意改写（或改写难度大）。"
  },
  {
    "id": 88,
    "question": "对n个元素进行快速排序，最坏情况下的时间复杂度是？",
    "options": ["O(n²)", "O(n log n)", "O(n)", "O(log n)", "O(n³)", "O(2ⁿ)"],
    "answer": "O(n²)",
    "difficulty": 3,
    "explanation": "快速排序最坏情况出现在数组已序或逆序时，此时每次划分仅得到一个子数组，时间复杂度退化为O(n²)；平均时间复杂度为O(n log n)。"
  },
  {
    "id": 89,
    "question": "在C++中，以下哪个函数用于从键盘读取格式化输入？",
    "options": ["scanf", "cin", "cout", "printf", "fscanf", "fprintf"],
    "answer": "scanf",
    "difficulty": 2,
    "explanation": "scanf是C语言风格的格式化输入函数，支持通过格式控制符（如%d、%c）读取不同类型数据；cin是C++的输入流对象（非格式化输入），cout、printf用于输出，均与题干要求不符。"
  },
  {
    "id": 90,
    "question": "十进制数10对应的二进制、八进制、十六进制表示中，正确的是？",
    "options": ["1010,12,A", "1001,11,9", "1100,14,C", "1011,13,B", "1101,15,D", "1000,10,8"],
    "answer": "1010,12,A",
    "difficulty": 2,
    "explanation": "10的二进制为1010（1×2³+0×2²+1×2¹+0×2⁰=10），八进制为12（1×8¹+2×8⁰=10），十六进制为A（10×16⁰=10）。"
  },
  {
    "id": 91,
    "question": "以下哪种图的遍历方式优先访问当前节点的邻接节点，再访问邻接节点的邻接节点？",
    "options": ["广度优先搜索（BFS）", "深度优先搜索（DFS）", "先序遍历", "中序遍历", "后序遍历", "随机遍历"],
    "answer": "广度优先搜索（BFS）",
    "difficulty": 3,
    "explanation": "BFS的遍历逻辑是“先访问当前节点，再依次访问其所有邻接节点，最后递归访问邻接节点的邻接节点”，体现“逐层扩散”特性；DFS优先深入访问当前节点的一个邻接节点，再回溯，与题干描述不符。"
  },
  {
    "id": 92,
    "question": "下列哪个是计算机的外存储设备？",
    "options": ["固态硬盘（SSD）", "内存（RAM）", "CPU缓存", "寄存器", "显卡显存", "主板BIOS芯片"],
    "answer": "固态硬盘（SSD）",
    "difficulty": 1,
    "explanation": "外存储设备用于长期存储数据，断电后数据不丢失，固态硬盘（SSD）属于此类；内存、CPU缓存、寄存器均为临时存储（内存设备），BIOS芯片是ROM，不属于外存范畴。"
  },
  {
    "id": 93,
    "question": "在一个长度为n的链表中，查找第k个元素（1≤k≤n）需要的时间复杂度是？",
    "options": ["O(n)", "O(1)", "O(log n)", "O(n log n)", "O(n²)", "O(2ⁿ)"],
    "answer": "O(n)",
    "difficulty": 3,
    "explanation": "链表存储不连续，查找第k个元素需从表头开始依次遍历k个节点，最坏情况下需遍历n个节点，时间复杂度为O(n)；数组查找第k个元素时间复杂度为O(1)，与链表不同。"
  },
  {
    "id": 94,
    "question": "C++中，以下哪个语句用于终止当前循环的本次迭代，直接进入下一次迭代？",
    "options": ["continue", "break", "return", "goto", "if", "for"],
    "answer": "continue",
    "difficulty": 2,
    "explanation": "continue语句的作用是跳过当前循环中剩余代码，直接执行下一次循环的条件判断；break用于终止整个循环，return用于返回函数值，均与题干描述不符。"
  },
  {
    "id": 95,
    "question": "二进制数100110转换成十六进制数是？",
    "options": ["26", "27", "28", "29", "2A", "2B"],
    "answer": "26",
    "difficulty": 2,
    "explanation": "二进制100110从右分组为0010 0110（不足4位补前导0），0010对应十六进制2，0110对应6，合并为26。"
  },
  {
    "id": 96,
    "question": "以下哪种算法可用于检测图中是否存在环？",
    "options": ["深度优先搜索（DFS）", "冒泡排序", "快速排序", "归并排序", "希尔排序", "堆排序"],
    "answer": "深度优先搜索（DFS）",
    "difficulty": 3,
    "explanation": "DFS通过记录节点访问状态（未访问、访问中、已访问），若遍历中遇到“访问中”的节点，则说明存在环；其余选项均为排序算法，与图的环检测无关。"
  },
  {
    "id": 97,
    "question": "计算机中，1TB等于多少GB？",
    "options": ["1024", "1000", "2048", "512", "1024×1024", "1000×1000"],
    "answer": "1024",
    "difficulty": 1,
    "explanation": "计算机存储单位遵循2的幂次换算规则，1TB = 1024GB，1GB = 1024MB，1MB = 1024KB，1KB = 1024B。"
  },
  {
    "id": 98,
    "question": "一棵二叉树的前序遍历为ABDECF，中序遍历为DBEAFC，则其后序遍历是？",
    "options": ["DEBFCA", "DEB FAC", "DBEFCA", "DBEACF", "DEBCFA", "DBEFAC"],
    "answer": "DEBFCA",
    "difficulty": 4,
    "explanation": "由前序可知根为A，中序A左边“DBE”为左子树，右边“FC”为右子树；左子树前序“BDE”、中序“DBE”，根为B，左子树D、右子树E；右子树前序“CF”、中序“FC”，根为C，左子树F；后序遍历为左-右-根，即DEB-F-C-A，合并为DEBFCA。"
  },
  {
    "id": 99,
    "question": "在C++中，以下哪个是指针变量的声明方式？",
    "options": ["int *p;", "int &p;", "int p;", "const int p;", "static int p;", "auto int p;"],
    "answer": "int *p;",
    "difficulty": 2,
    "explanation": "C++中通过“*”声明指针变量，“int *p;”表示p是指向int类型变量的指针；“int &p;”是引用声明，“int p;”是普通变量声明，均与指针无关。"
  },
  {
    "id": 100,
    "question": "十进制数0.5转换成二进制数是？",
    "options": ["0.1", "0.01", "0.11", "0.101", "0.001", "0.1001"],
    "answer": "0.1",
    "difficulty": 3,
    "explanation": "小数部分乘2取整：0.5×2=1.0，取整数部分1，剩余小数部分0，停止计算，故0.5的二进制表示为0.1。"
  },
  {
    "id": 101,
    "question": "以下哪种编程语言是解释型语言？",
    "options": ["Python", "C++", "C", "Java（编译后）", "Go", "Rust"],
    "answer": "Python",
    "difficulty": 2,
    "explanation": "解释型语言无需提前编译为机器码，而是由解释器逐行执行源代码（如Python）；C++、C、Go、Rust均为编译型语言，Java需先编译为字节码，再由JVM解释执行，不属于纯解释型语言。"
  },
  {
    "id": 102,
    "question": "计算机网络中，DNS协议的主要作用是？",
    "options": ["将域名转换为IP地址", "传输网页数据", "建立TCP连接", "加密网络数据", "检测网络故障", "传输文件"],
    "answer": "将域名转换为IP地址",
    "difficulty": 2,
    "explanation": "DNS（域名系统）是应用层协议，用于将用户易记的域名（如www.baidu.com）解析为计算机可识别的IP地址（如180.101.49.12）；传输网页数据用HTTP，建立TCP连接是TCP协议的功能，均与DNS无关。"
  },
  {
    "id": 103,
    "question": "栈的典型应用场景不包括？",
    "options": ["队列的实现", "表达式求值", "函数调用", "括号匹配", " undo操作", "深度优先搜索"],
    "answer": "队列的实现",
    "difficulty": 3,
    "explanation": "队列通常通过数组或链表实现，栈的“先进后出”特性与队列的“先进先出”需求冲突，无法直接实现队列；表达式求值、函数调用等均依赖栈的特性，属于典型应用。"
  },
  {
    "id": 104,
    "question": "十进制数31转换成二进制数是？",
    "options": ["11111", "11110", "11101", "11011", "10111", "111111"],
    "answer": "11111",
    "difficulty": 2,
    "explanation": "31是2⁵ - 1（32-1=31），二进制表示为5个1，即11111。"
  },
  {
    "id": 105,
    "question": "在C++中，类的成员访问权限不包括下列哪种？",
    "options": ["public", "private", "protected", "internal", "public protected", "private public"],
    "answer": "internal",
    "difficulty": 2,
    "explanation": "C++类的成员访问权限仅分为public（公开）、private（私有）、protected（保护）三种；internal是C#中的访问修饰符，C++中无此权限类型。"
  },
  {
    "id": 106,
    "question": "下列哪种排序算法基于“分治思想”实现？",
    "options": ["快速排序", "冒泡排序", "插入排序", "选择排序", "希尔排序", "基数排序"],
    "answer": "快速排序",
    "difficulty": 3,
    "explanation": "快速排序通过“选择基准值-划分数组-递归排序子数组”的分治步骤实现；冒泡排序、插入排序等基于“相邻比较”或“增量排序”，无分治思想。"
  },
  {
    "id": 107,
    "question": "计算机网络中，UDP协议的特点是？",
    "options": ["无连接、不可靠", "面向连接、可靠", "无连接、可靠", "面向连接、不可靠", "仅用于语音通话", "仅用于文本传输"],
    "answer": "无连接、不可靠",
    "difficulty": 2,
    "explanation": "UDP（用户数据报协议）无需建立连接，直接发送数据，不保证数据到达顺序或是否丢失（不可靠）；面向连接、可靠是TCP的特点，UDP可用于语音、视频、实时游戏等场景。"
  },
  {
    "id": 108,
    "question": "一棵满二叉树的深度为k（根节点深度为1），其节点总数为？",
    "options": ["2ᵏ - 1", "2ᵏ", "2ᵏ⁻¹", "2ᵏ + 1", "k", "k²"],
    "answer": "2ᵏ - 1",
    "difficulty": 3,
    "explanation": "满二叉树每一层节点数为2⁰（第1层）、2¹（第2层）、…、2ᵏ⁻¹（第k层），总节点数为等比数列求和：2⁰+2¹+…+2ᵏ⁻¹ = 2ᵏ - 1。"
  },
  {
    "id": 109,
    "question": "在C++中，以下哪个函数用于关闭文件流？",
    "options": ["close()", "open()", "read()", "write()", "flush()", "seek()"],
    "answer": "close()",
    "difficulty": 2,
    "explanation": "C++中文件流对象（如fstream）通过close()函数关闭已打开的文件，释放文件资源；open()用于打开文件，read()/write()用于读写数据，均与关闭文件无关。"
  },
  {
    "id": 110,
    "question": "十六进制数2F对应的十进制数是？",
    "options": ["47", "46", "45", "44", "43", "42"],
    "answer": "47",
    "difficulty": 2,
    "explanation": "十六进制2F转换为十进制：2×16¹ + 15×16⁰ = 32 + 15 = 47。"
  },
  {
    "id": 111,
    "question": "操作系统中，“线程”与“进程”的主要区别是？",
    "options": ["线程共享进程资源，进程间资源独立", "线程资源独立，进程共享资源", "线程可独立运行，进程不可", "进程可独立运行，线程不可", "线程占用内存大，进程占用小", "进程生命周期短，线程长"],
    "answer": "线程共享进程资源，进程间资源独立",
    "difficulty": 3,
    "explanation": "进程是资源分配的基本单位，进程间内存、文件等资源独立；线程是调度的基本单位，同一进程内的线程共享进程的内存空间和资源，仅拥有独立的栈和寄存器。"
  },
  {
    "id": 112,
    "question": "逻辑运算中，“假 or 假”的结果是？",
    "options": ["假", "真", "不确定", "0", "1", "以上都不对"],
    "answer": "假",
    "difficulty": 1,
    "explanation": "逻辑或（or）运算规则：只有当两个操作数均为假时，结果才为假；否则为真。因此“假 or 假”结果为假。"
  },
  {
    "id": 113,
    "question": "哈希表中解决“哈希冲突”的方法不包括？",
    "options": ["顺序查找", "链式地址法", "开放地址法", "再哈希法", "建立公共溢出区", "线性探测法"],
    "answer": "顺序查找",
    "difficulty": 3,
    "explanation": "哈希冲突指不同键值映射到同一哈希地址，解决方法包括链式地址法（链表存储冲突元素）、开放地址法（如线性探测）、再哈希法等；顺序查找是线性表的查找方式，与哈希冲突解决无关。"
  },
  {
    "id": 114,
    "question": "以下哪种算法用于“拓扑排序”？",
    "options": ["基于入度的Kahn算法", "Dijkstra算法", "Bellman-Ford算法", "冒泡排序", "快速排序", "归并排序"],
    "answer": "基于入度的Kahn算法",
    "difficulty": 4,
    "explanation": "拓扑排序用于有向无环图（DAG），Kahn算法通过“不断选择入度为0的节点，删除其出边并更新邻接节点入度”实现；Dijkstra算法用于最短路径，其余选项为排序算法，均与拓扑排序无关。"
  },
  {
    "id": 115,
    "question": "二进制数11001对应的十进制数是？",
    "options": ["25", "24", "23", "22", "21", "20"],
    "answer": "25",
    "difficulty": 2,
    "explanation": "二进制11001转换为十进制：1×2⁴ + 1×2³ + 0×2² + 0×2¹ + 1×2⁰ = 16 + 8 + 0 + 0 + 1 = 25。"
  },
  {
    "id": 116,
    "question": "CSP认证的全称是？",
    "options": ["计算机软件能力认证", "计算机等级考试", "软件专业技术资格考试", "全国计算机应用水平考试", "程序设计竞赛", "信息学奥林匹克竞赛"],
    "answer": "计算机软件能力认证",
    "difficulty": 1,
    "explanation": "CSP是“Computer Software Proficiency Certification”的缩写，中文全称为“计算机软件能力认证”，旨在评估计算机软件开发者的编程能力；其余选项为不同类型的计算机相关考试或竞赛，与CSP无关。"
  },
  {
    "id": 117,
    "question": "以下哪种设备属于计算机的输入设备？",
    "options": ["扫描仪", "打印机", "显示器", "音箱", "投影仪", "绘图仪"],
    "answer": "扫描仪",
    "difficulty": 1,
    "explanation": "输入设备用于向计算机输入数据或指令，扫描仪通过扫描纸质文档、图片等生成数字数据，属于输入设备；打印机、显示器等均为输出设备，用于呈现计算机处理结果。"
  },
  {
    "id": 118,
    "question": "一棵二叉树的中序遍历为ABCDEF，后序遍历为BDFECA，则其前序遍历是？",
    "options": ["ACEBDF", "ABCDEF", "ACBDEF", "AEFBCD", "AFEDCB", "AEDCFB"],
    "answer": "ACEBDF",
    "difficulty": 4,
    "explanation": "后序遍历（左-右-根）最后一个元素为根，即A；中序A右边“BCDEF”为右子树，后序右子树为“BDFEC”，根为C；中序C左边“B”为左子树（后序B），右边“DEF”为右子树（后序DFE，根为E，左D、右F）；前序遍历为根-左-右，即A-C-E-B-D-F，合并为ACEBDF。"
  },
  {
    "id": 119,
    "question": "在C++中，以下哪个头文件用于使用字符串类（string）？",
    "options": ["<string>", "<string.h>", "<cstring>", "<iostream>", "<stdio.h>", "<math.h>"],
    "answer": "<string>",
    "difficulty": 2,
    "explanation": "<string>是C++标准库中string类的头文件，包含string类的声明和成员函数；<string.h>和<cstring>是C语言风格的字符串处理头文件（如strlen、strcpy），不包含C++的string类。"
  },
  {
    "id": 120,
    "question": "十进制数1对应的二进制数是？",
    "options": ["1", "10", "11", "100", "101", "111"],
    "answer": "1",
    "difficulty": 1,
    "explanation": "十进制1是2⁰，二进制表示为“1”，无需扩展位数。"
  },
  {
    "id": 121,
    "question": "以下哪种排序算法的时间复杂度不受数据初始顺序影响？",
    "options": ["堆排序", "冒泡排序", "快速排序", "插入排序", "希尔排序", "基数排序"],
    "answer": "堆排序",
    "difficulty": 3,
    "explanation": "堆排序通过构建堆和调整堆实现，无论数据初始是否有序，时间复杂度均为O(n log n)；冒泡排序、快速排序、插入排序的时间复杂度均受数据初始顺序影响（如已序时冒泡排序复杂度O(n)）。"
  },
  {
    "id": 122,
    "question": "计算机网络中，端口号的作用是？",
    "options": ["标识主机上的应用程序", "标识网络中的主机", "加密网络数据", "传输数据帧", "检测网络错误", "路由数据包"],
    "answer": "标识主机上的应用程序",
    "difficulty": 2,
    "explanation": "端口号是TCP/UDP协议中用于区分主机上不同应用程序的标识（如HTTP用80端口，HTTPS用443端口）；标识主机用IP地址，加密数据用加密协议（如SSL/TLS），均与端口号无关。"
  },
  {
    "id": 123,
    "question": "队列的典型应用场景不包括？",
    "options": ["表达式求值", "广度优先搜索（BFS）", "任务调度", "消息队列", "缓冲处理", "打印任务排队"],
    "answer": "表达式求值",
    "difficulty": 3,
    "explanation": "表达式求值依赖栈的“先进后出”特性（如处理运算符优先级），队列的“先进先出”特性不适合；BFS、任务调度、打印排队等均依赖队列的顺序处理特性，属于典型应用。"
  },
  {
    "id": 124,
    "question": "在C++中，以下哪个运算符用于判断两个值是否相等？",
    "options": ["==", "=", "!=", ">", "<", ">="],
    "answer": "==",
    "difficulty": 1,
    "explanation": "C++中“==”是相等比较运算符，用于判断两个操作数是否相等（如a == b）；“=”是赋值运算符，用于将右边值赋给左边变量（如a = b），二者功能完全不同。"
  },
  {
    "id": 125,
    "question": "二进制数1000对应的十进制数是？",
    "options": ["8", "7", "6", "5", "4", "3"],
    "answer": "8",
    "difficulty": 1,
    "explanation": "二进制1000是2³，转换为十进制：1×2³ = 8。"
  },
  {
    "id": 126,
    "question": "以下哪种数据结构是“键值对”存储结构？",
    "options": ["哈希表", "数组", "链表", "栈", "队列", "二叉树"],
    "answer": "哈希表",
    "difficulty": 2,
    "explanation": "哈希表以“键（key）-值（value）”对的形式存储数据，通过键快速查找值；数组通过索引查找，链表、栈、队列按顺序存储，二叉树按节点值关系存储，均非键值对结构。"
  },
  {
    "id": 127,
    "question": "计算机网络中，TCP三次握手的目的是？",
    "options": ["建立可靠的连接", "断开连接", "传输数据", "加密数据", "检测网络故障", "分配IP地址"],
    "answer": "建立可靠的连接",
    "difficulty": 2,
    "explanation": "TCP三次握手是客户端与服务器之间建立连接的过程：客户端发送连接请求、服务器确认请求并回应、客户端再次确认，通过三次交互确保双方通信能力正常，建立可靠连接；断开连接用四次挥手，与三次握手无关。"
  },
  {
    "id": 128,
    "question": "一棵二叉搜索树中，插入一个新节点的时间复杂度是？",
    "options": ["O(log n)（平均）", "O(n)（平均）", "O(n log n)（平均）", "O(n²)（平均）", "O(1)（平均）", "O(2ⁿ)（平均）"],
    "answer": "O(log n)（平均）",
    "difficulty": 3,
    "explanation": "二叉搜索树插入节点时，需从根节点向下查找插入位置，平均情况下树的深度为log n，故时间复杂度为O(log n)；最坏情况（树为单链）时间复杂度为O(n)。"
  },
  {
    "id": 129,
    "question": "在C++中，以下哪个循环语句的循环体可能一次都不执行？",
    "options": ["while", "do-while", "for（条件初始为假）", "if", "switch", "goto"],
    "answer": "while",
    "difficulty": 2,
    "explanation": "while循环先判断条件，若条件初始为假，则循环体一次都不执行；do-while先执行循环体再判断条件，至少执行一次；for循环若初始条件为假也可能不执行，但选项中while更直接符合“可能一次不执行”的典型场景。"
  },
  {
    "id": 130,
    "question": "十进制数16转换成十六进制数是？",
    "options": ["10", "F", "11", "E", "12", "D"],
    "answer": "10",
    "difficulty": 2,
    "explanation": "16÷16=1余0，十六进制中1对应“1”，余数0对应“0”，故16的十六进制表示为10。"
  },
  {
    "id": 131,
    "question": "以下哪种算法是“动态规划”的典型应用？",
    "options": ["最长公共子序列（LCS）", "冒泡排序", "快速排序", "归并排序", "堆排序", "希尔排序"],
    "answer": "最长公共子序列（LCS）",
    "difficulty": 3,
    "explanation": "最长公共子序列问题通过“分解子问题-存储子问题解-合并解”的动态规划思想实现，避免重复计算；其余选项均为排序算法，与动态规划无关。"
  },
  {
    "id": 132,
    "question": "计算机硬件中，硬盘的主要作用是？",
    "options": ["长期存储文件和数据", "临时存储运行中的程序", "执行算术逻辑运算", "处理图形图像", "输入用户指令", "连接网络设备"],
    "answer": "长期存储文件和数据",
    "difficulty": 1,
    "explanation": "硬盘（包括机械硬盘HDD和固态硬盘SSD）是外存储设备，用于长期存储操作系统、应用程序、用户文件等，断电后数据不丢失；临时存储程序是内存的功能，执行运算为CPU功能。"
  },
  {
    "id": 133,
    "question": "图的邻接矩阵存储方式的优点是？",
    "options": ["查找两个节点是否相邻效率高", "存储空间小", "插入边效率高", "删除边效率高", "适合存储稀疏图", "遍历节点效率高"],
    "answer": "查找两个节点是否相邻效率高",
    "difficulty": 3,
    "explanation": "邻接矩阵用二维数组存储图，若matrix[i][j] = 1表示节点i和j相邻，查找相邻关系的时间复杂度为O(1)；其缺点是存储空间大（O(n²)），适合稠密图，插入/删除边效率低于邻接表。"
  },
  {
    "id": 134,
    "question": "在C++中，以下哪个关键字用于声明常量指针？",
    "options": ["const int *p;", "int *const p;", "int const *p;", "const int const *p;", "int &p;", "int *p;"],
    "answer": "const int *p;",
    "difficulty": 3,
    "explanation": "const int *p; 表示“指针p指向的int类型数据是常量”（常量指针），指针p本身可指向其他地址；int *const p; 表示“指针p本身是常量”（指针常量），指向的地址不可变；题干问“常量指针”，对应const int *p;。"
  },
  {
    "id": 135,
    "question": "十六进制数3A对应的二进制数是？",
    "options": ["111010", "111001", "110101", "110110", "101011", "101101"],
    "answer": "111010",
    "difficulty": 2,
    "explanation": "十六进制3对应二进制0011，A对应1010，合并后为00111010，省略前导0后为111010。"
  },
  {
    "id": 136,
    "question": "以下哪种是线性数据结构？",
    "options": ["链表", "二叉树", "图", "堆", "哈希表（链式解决冲突）", "树"],
    "answer": "链表",
    "difficulty": 2,
    "explanation": "线性结构中数据元素呈“一对一”线性关系，链表中每个节点仅指向一个后继节点（单链表），符合线性结构定义；二叉树、图、堆等均为非线性结构，数据元素呈“一对多”或“多对多”关系。"
  },
  {
    "id": 137,
    "question": "计算机中，缓存（Cache）的作用是？",
    "options": ["缓解CPU与内存的速度差异", "长期存储数据", "输入用户指令", "输出处理结果", "连接外部设备", "加密数据"],
    "answer": "缓解CPU与内存的速度差异",
    "difficulty": 2,
    "explanation": "CPU运算速度远快于内存读写速度，缓存（Cache）是介于CPU和内存之间的高速存储，用于存放CPU近期可能访问的数据，减少CPU等待内存的时间，提升整体性能；长期存储数据是硬盘的功能，与缓存无关。"
  },
  {
    "id": 138,
    "question": "对n个元素进行插入排序，平均情况下的比较次数是？",
    "options": ["O(n²)", "O(n log n)", "O(n)", "O(log n)", "O(n³)", "O(2ⁿ)"],
    "answer": "O(n²)",
    "difficulty": 3,
    "explanation": "插入排序通过“将元素插入已排序部分的正确位置”实现，平均情况下需比较n(n-1)/2次，时间复杂度为O(n²)；仅在数据已序时复杂度为O(n)，属于最好情况。"
  },
  {
    "id": 139,
    "question": "在C++中，以下哪个函数用于输出字符到标准输出？",
    "options": ["putchar()", "getchar()", "scanf()", "printf()", "cin.get()", "cout.put()"],
    "answer": "putchar()",
    "difficulty": 2,
    "explanation": "putchar()是C语言标准库函数，用于向标准输出（屏幕）输出单个字符；getchar()用于读取字符，scanf()/printf()用于格式化输入输出（非单个字符专用），cout.put()是C++的输出方式，题干未限定C++专属函数，putchar()更符合“输出字符”的核心需求。"
  },
  {
    "id": 140,
    "question": "十进制数7对应的二进制、八进制、十六进制表示中，正确的是？",
    "options": ["111,7,7", "110,6,6", "101,5,5", "100,4,4", "111,8,7", "110,7,6"],
    "answer": "111,7,7",
    "difficulty": 2,
    "explanation": "7的二进制为111（1×2²+1×2¹+1×2⁰=7），八进制为7（7×8⁰=7），十六进制为7（7×16⁰=7）。"
  },
  {
    "id": 141,
    "question": "以下哪种图的遍历方式会使用“递归”实现？",
    "options": ["深度优先搜索（DFS）", "广度优先搜索（BFS）", "拓扑排序", "Kahn算法", "Dijkstra算法", "Bellman-Ford算法"],
    "answer": "深度优先搜索（DFS）",
    "difficulty": 3,
    "explanation": "DFS的“深入访问-回溯”逻辑天然适合用递归实现（递归调用自身处理邻接节点）；BFS通常用队列实现，拓扑排序（Kahn算法）、最短路径算法均不依赖递归，与题干描述不符。"
  },
  {
    "id": 142,
    "question": "下列哪个是计算机的内存设备？",
    "options": ["DDR内存", "机械硬盘（HDD）", "固态硬盘（SSD）", "U盘", "移动硬盘", "光盘"],
    "answer": "DDR内存",
    "difficulty": 1,
    "explanation": "内存设备用于临时存储运行中的程序和数据，断电后数据丢失，DDR内存（如DDR4、DDR5）属于此类；硬盘、U盘、光盘均为外存储设备，用于长期存储数据，断电后数据不丢失。"
  },
  {
    "id": 143,
    "question": "在一个长度为n的数组中，插入一个元素到第k个位置（1≤k≤n+1）需要移动的元素个数是？",
    "options": ["n - k + 1", "n - k", "k", "k - 1", "n", "1"],
    "answer": "n - k + 1",
    "difficulty": 3,
    "explanation": "数组插入元素时，第k个位置及之后的元素需向后移动一位，第k到第n位共n - k + 1个元素（如n=5、k=3时，需移动3、4、5位，共3个元素，5-3+1=3）。"
  },
  {
    "id": 144,
    "question": "C++中，以下哪个语句用于终止整个循环？",
    "options": ["break", "continue", "return", "goto", "if", "for"],
    "answer": "break",
    "difficulty": 2,
    "explanation": "break语句的作用是立即终止当前所在的循环（或switch语句），跳出循环体；continue仅终止本次迭代，return用于返回函数，均与“终止整个循环”的需求不符。"
  },
  {
    "id": 145,
    "question": "二进制数11101转换成十六进制数是？",
    "options": ["1D", "1E", "1F", "1C", "1B", "1A"],
    "answer": "1D",
    "difficulty": 2,
    "explanation": "二进制11101从右分组为0001 1101（不足4位补前导0），0001对应十六进制1，1101对应D，合并为1D。"
  },
  {
    "id": 146,
    "question": "以下哪种算法可用于“最小生成树”问题？",
    "options": ["Prim算法", "Dijkstra算法", "Bellman-Ford算法", "冒泡排序", "快速排序", "归并排序"],
    "answer": "Prim算法",
    "difficulty": 3,
    "explanation": "Prim算法通过“每次选择与当前生成树最近的节点”的贪心策略，构建无向图的最小生成树；Dijkstra算法用于最短路径，其余选项为排序算法，均与最小生成树无关。"
  },
  {
    "id": 147,
    "question": "计算机中，1KB等于多少字节（Byte）？",
    "options": ["1024", "1000", "2048", "512", "1024×1024", "1000×1000"],
    "answer": "1024",
    "difficulty": 1,
    "explanation": "计算机存储单位的基本换算规则：1KB（千字节）= 1024B（字节），1MB=1024KB，以此类推，基于2的幂次。"
  },
  {
    "id": 148,
    "question": "一棵二叉树的前序遍历为ABC，中序遍历为BAC，则其后序遍历是？",
    "options": ["BCA", "BAC", "ABC", "ACB", "CBA", "CAB"],
    "answer": "BCA",
    "difficulty": 3,
    "explanation": "前序遍历（根-左-右）第一个元素为根，即A；中序遍历（左-根-右）A左边“B”为左子树，右边“C”为右子树；后序遍历为左-右-根，即B-C-A，合并为BCA。"
  },
  {
    "id": 149,
    "question": "在C++中，以下哪个是引用变量的特点？",
    "options": ["必须初始化，且不能重新绑定", "无需初始化，可重新绑定", "必须初始化，可重新绑定", "无需初始化，不能重新绑定", "可指向NULL", "占用独立内存空间"],
    "answer": "必须初始化，且不能重新绑定",
    "difficulty": 3,
    "explanation": "C++中引用是变量的别名，声明时必须绑定到一个已存在的变量（初始化），且绑定后不能再指向其他变量（不可重新绑定）；指针可无需初始化（指向NULL）且可重新指向，引用不占用独立内存空间，与指针不同。"
  },
  {
    "id": 150,
    "question": "十进制数0.75转换成二进制数是？",
    "options": ["0.11", "0.1", "0.01", "0.101", "0.001", "0.1001"],
    "answer": "0.11",
    "difficulty": 3,
    "explanation": "小数部分乘2取整：0.75×2=1.0（取1，剩余0.0）→ 0.0×2=0.0（取0），停止计算，故0.75的二进制表示为0.11。"
  }
]

}
